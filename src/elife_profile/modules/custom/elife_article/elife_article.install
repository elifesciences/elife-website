<?php
/**
 * @file
 * Install, uninstall and update the elife_article module.
 */

/**
 * Implements hook_requirements().
 */
function elife_article_requirements($phase) {
  $requirements = array();

  // Report the version of libraries.
  if ($phase == 'runtime') {
    drupal_load('module', 'libraries');
    $libraries = elife_article_libraries_info();
    foreach ($libraries as $name => $info) {
      $library = libraries_detect($name);
      $requirements[$name] = array(
        'title' => $library['name'],
        'severity' => $library['installed'] ? REQUIREMENT_OK : REQUIREMENT_WARNING,
        'value' => $library['installed'] ? l($library['version'], $library['vendor url']) : $library['error message'],
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function elife_article_schema() {
  $schema['elife_markup'] = array(
    'description' => 'Cache table for eLife markup service queries.',
    'fields' => array(
      // This is a md5 hash of the serialized output of
      // \Drupal\elife_article\ElifeMarkupServiceInterface::getQuery().
      'id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 32,
        'description' => 'Hash of markup queries',
      ),
      // In most cases this will just be one value, but this could be adapted to
      // have multiple 'article_version_id' with a '::' delimiter.
      'article_version_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'Hash of markup queries',
      ),
      'markup' => array(
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Serialized ElifeMarkupService object',
      ),
      'date' => array(
        'description' => 'The Unix timestamp of when the query was stored.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['elife_citation'] = array(
    'description' => 'Cache table for eLife citation format service queries.',
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'Article version id',
      ),
      'citation' => array(
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Serialized ElifeCitationService object',
      ),
      'date' => array(
        'description' => 'The Unix timestamp of when the query was stored.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['elife_related_articles'] = array(
    'description' => 'Related articles as recorded in the ingested EIF json.',
    'fields' => array(
      'source_doi' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'DOI of source article',
      ),
      'description' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'Description of the nature of the relation between articles',
      ),
      'dest_doi' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
        'description' => 'DOI of destination article',
      ),
    ),
    'primary key' => array(
      'source_doi',
      'dest_doi',
    ),
  );
  $schema['cache_elife_article_pmid'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_elife_article_glencoe'] = drupal_get_schema_unprocessed('system', 'cache');
  return $schema;
}

/**
 * Implements hook_install().
 */
function elife_article_install() {
  // @todo - elife - nlisgo - set assets path and patterns into environment settings.
  variable_set('elife_article_source_assets_base_path', 'http://parallel-elife-publishing-cdn.s3.amazonaws.com/');
  variable_set('elife_article_source_assets_xml_file_pattern', '[node:manuscript_id]/elife-[node:manuscript_id]-v[node:version_no].xml');
  variable_set('elife_article_source_assets_pdf_file_pattern', '[node:manuscript_id]/elife-[node:manuscript_id]-v[node:version_no].pdf');
  variable_set('elife_article_source_assets_glencoe_api', 'http://movie-usa.glencoesoftware.com/metadata/');
}

/**
 * Implements hook_uninstall().
 */
function elife_article_uninstall() {
  variable_del('elife_article_citation_service_factory');
  variable_del('elife_article_markup_service_factory');
  variable_del('elife_article_sections_available');
  variable_del('elife_article_source_xml_base_path');
  variable_del('elife_article_source_xml_file_pattern');
  variable_del('elife_article_source_assets_pdf_file_pattern');
}

/**
 * Create cache table for calls to glencoe API.
 */
function elife_article_update_7100() {
  $schema = elife_article_schema();
  db_create_table('cache_elife_article_glencoe', $schema['cache_elife_article_glencoe']);
}

/**
 * Set assets base path and Glencoe API url.
 */
function elife_article_update_7101() {
  variable_set('elife_article_source_assets_base_path', 'http://parallel-elife-publishing-cdn.s3.amazonaws.com/');
  variable_set('elife_article_source_assets_glencoe_api', 'http://elife-dev.glencoesoftware.com/api/v1/metadata/');
}

/**
 * Remove elife_article_category_plural variable.
 */
function elife_article_update_7102() {
  $plural_terms = variable_get('elife_article_category_plural', []);

  if (!empty($plural_terms)) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('elife_categories')->vid)
      ->propertyCondition('name', array_keys($plural_terms), 'IN')
      ->execute();

    if (!empty($result['taxonomy_term'])) {
      foreach (taxonomy_term_load_multiple(array_keys($result['taxonomy_term'])) as $term) {
        $term->field_elife_category_plural = [
          LANGUAGE_NONE => [
            0 => [
              'value' => $plural_terms[$term->name],
              'format' => 'elife_house_style',
            ],
          ],
        ];

        taxonomy_term_save($term);
      }
    }
  }

  variable_del('elife_article_category_plural');
}

/**
 * Set assets Glencoe API url.
 */
function elife_article_update_7103() {
  variable_set('elife_article_source_assets_glencoe_api', 'http://movie-usa.glencoesoftware.com/metadata/');
}

/**
 * Add index to improve ElifeArticleVersion::retrieveRelatedArticles()
 * performance.
 */
function elife_article_update_7104() {
  db_add_index('field_data_field_elife_a_doi', 'elife_type_value', [
    'entity_type',
    'field_elife_a_doi_value',
  ]);
}

/**
 * Correct field types.
 */
function elife_article_update_7105() {
  db_change_field('elife_markup', 'markup', 'markup', [
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'Serialized ElifeMarkupService object',
  ]);
  db_change_field('elife_citation', 'citation', 'citation', [
    'type' => 'blob',
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'Serialized ElifeCitationService object',
  ]);
}

/**
 * Create table to store related articles.
 */
function elife_article_update_7106() {
  $schema = elife_article_schema();
  db_create_table('elife_related_articles', $schema['elife_related_articles']);

  $related_articles = "SELECT doi1.field_elife_a_doi_value AS source_doi, doi2.field_elife_a_doi_value AS dest_doi, rft.field_elife_a_rel_article_type_value AS rel_type FROM {field_data_field_elife_a_related_articles} rel INNER JOIN {field_data_field_elife_a_versions} vrs ON vrs.entity_id = rel.entity_id AND vrs.entity_type = rel.entity_type INNER JOIN {field_data_field_elife_a_doi} doi1 ON doi1.entity_id = vrs.field_elife_a_versions_target_id AND doi1.entity_type = 'node' AND vrs.delta = 0 INNER JOIN {field_data_field_elife_a_rel_article_type} rft ON rft.entity_id = rel.field_elife_a_related_articles_value AND rft.entity_type = 'field_collection_item' INNER JOIN {field_data_field_elife_a_doi} doi2 ON doi2.entity_id = rel.field_elife_a_related_articles_value AND doi2.entity_type = 'field_collection_item' WHERE rel.entity_type = 'node' ORDER BY source_doi, dest_doi";
  $results = db_query($related_articles);

  foreach ($results as $result) {
    db_merge('elife_related_articles')
      ->key([
        'source_doi' => $result->source_doi,
        'dest_doi' => $result->dest_doi,
      ])
      ->fields([
        'description' => $result->rel_type,
      ])
      ->execute();
  }

  if ($instance = field_info_instance('node', 'field_elife_a_related_articles', 'elife_article')) {
    field_delete_instance($instance);
  }
}
